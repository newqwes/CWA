import TelegraAPI from 'node-telegram-bot-api';
import { forEach, isEmpty, isFinite, round } from 'lodash';
import { chunk, get, isEqual, pick } from 'lodash/fp';
import cron from 'node-cron';

import { AGAIN_MESSAGE_OPTIONS, MESSAGE_OPTIONS, MINUTE, TEN_MINUTE } from '../constants/telegram';
import { compareResults, getResultMessage, isAuthCode, removeAuthCode } from '../utils/telegram';
import userService from './userService';
import orderService from './orderService';

import {
  getComparisonOrdersAndPriceList,
  getGridRowData,
  getNetProfit,
  getNetProfitPercent,
  getTotalInvested,
  getUniqNameOrders,
  getWalletState
} from '../utils/extractData';
import refreshService from './refreshService';
import { getRemainingTime, isTimeLimitOver } from '../utils/toMinute';
import { getGeckoCoins } from '../utils/coinGeckoClient';

const MyBot = new TelegraAPI(process.env.BOT_TOKEN, { polling: true });
const myChatId = process.env.MY_TELEGRAM_LOGS_CHAT_ID;

let timeoutId = null;
let remainderTask = null;

const runNotification = async (userId, triggerPercent, chatId, oldPriceList) => {
  const orders = await orderService.getRawUserOrders(userId);

  const coinNameList = getUniqNameOrders(orders);

  const listCoin = await getGeckoCoins(coinNameList);

  const result = {};

  coinNameList.forEach(myCoinName => {
    const currency = listCoin.find(({ id }) => isEqual(id, myCoinName));

    const currentPrice = get(['current_price'], currency);

    const oldCurrency = oldPriceList.find(({ id }) => isEqual(id, myCoinName));
    const prevCurrentPrice = get(['current_price'], oldCurrency);

    if (!currentPrice || !prevCurrentPrice) return;

    const changesPricePercent = round((currentPrice * 100) / prevCurrentPrice - 100, 4);

    if (changesPricePercent > triggerPercent) {
      result[currency.name] = changesPricePercent;
    }

    if (changesPricePercent < -triggerPercent) {
      result[currency.name] = changesPricePercent;
    }
  });

  const arrResult = [];

  forEach(result, (value, key) => {
    arrResult.push(
      result[key] > 0
        ? `üîº${key}\n–ø–æ–¥–Ω—è–ª—Å—è –Ω–∞ ${round(value, 2)}%`
        : `üîª${key}\n—É–ø–∞–ª –Ω–∞ ${round(value, 2)}%`
    );
  });

  if (!isEmpty(arrResult)) {
    await MyBot.sendMessage(chatId, arrResult.join('\n\n'), MESSAGE_OPTIONS);
  }
};

const runTelegramBotService = async () => {
  MyBot.on(
    'message',
    async ({ text, chat: { id, first_name: firstName }, from: { id: telegramUserId } }) => {
      try {
        const userExist = await userService.findByTelegramUserId(telegramUserId);

        const textLikeNumber = Number(text);

        if (text === '/start') {
          return MyBot.sendMessage(
            id,
            `${firstName}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Coinlitics!`,
            MESSAGE_OPTIONS
          );
        }

        if (isAuthCode(text)) {
          const user = await userService.findByKey(removeAuthCode(text), 'id');

          if (!user) {
            return MyBot.sendMessage(
              id,
              `–û–®–ò–ë–ö–ê! –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∞–≤–µ–ª—å–Ω—ã–π! ${text}`,
              MESSAGE_OPTIONS
            );
          }

          if (user.telegramUserId) {
            return MyBot.sendMessage(
              id,
              '–î–∞–Ω–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!',
              MESSAGE_OPTIONS
            );
          }

          user.telegramUserId = telegramUserId;
          await user.save();

          return MyBot.sendMessage(id, '–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–Ω—è—Ç —É—Å–ø–µ—à–Ω–æ!', MESSAGE_OPTIONS);
        }

        if (!userExist) {
          return MyBot.sendMessage(
            id,
            `${firstName}, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã, –æ—Ç–ø—Ä–∞–≤—Ç–µ –Ω–∞–º –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–∞: coinlitics.space`,
            MESSAGE_OPTIONS
          );
        }

        if (text === 'üîÑüîÑüîÑ') {
          const { dataRefreshLimitPerMinute, lastDateUpdate } = pick(
            ['dataRefreshLimitPerMinute', 'lastDateUpdate'],
            userExist
          );

          const timeLimitOver = isTimeLimitOver(dataRefreshLimitPerMinute, lastDateUpdate);
          const remainingTime = getRemainingTime(dataRefreshLimitPerMinute, lastDateUpdate);

          if (!timeLimitOver) {
            return MyBot.sendMessage(
              id,
              `–û–±–Ω–æ–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑: ${remainingTime} —Å–µ–∫—É–Ω–¥`,
              MESSAGE_OPTIONS
            );
          }

          const orders = await orderService.getRawUserOrders(userExist.id);

          const coinNameList = getUniqNameOrders(orders);

          const gridRowData = getGridRowData(
            orders,
            userExist.list,
            userExist.prevData.gridRowData
          );

          const comparisonOrdersAndPriceList = getComparisonOrdersAndPriceList(
            orders,
            userExist.list
          );
          const netProfitRaw = getNetProfit(comparisonOrdersAndPriceList);
          const totalInvested = getTotalInvested(orders);

          const netProfitPercent = getNetProfitPercent(netProfitRaw, totalInvested);
          const walletState = getWalletState(netProfitRaw, totalInvested);

          const prevData = {
            netProfit: netProfitPercent,
            walletState,
            gridRowData
          };

          const refreshData = await refreshService.refresh({
            userId: userExist.id,
            prevData,
            coinList: coinNameList
          });

          const result = compareResults(refreshData);
          const { arrOfMessages, sumMessage, overThanLimit } = getResultMessage(result);

          if (overThanLimit) {
            const [mes1, mes2] = chunk(round(arrOfMessages.length / 2), arrOfMessages);

            await MyBot.sendMessage(id, mes1.join('\n'), MESSAGE_OPTIONS);
            await MyBot.sendMessage(
              myChatId,
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${firstName}, —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–ª –±–∞–ª–∞–Ω—Å.\n ${mes1.join('\n')}`,
              MESSAGE_OPTIONS
            );

            setTimeout(async () => {
              await MyBot.sendMessage(id, `${mes2.join('\n')}${sumMessage}`, MESSAGE_OPTIONS);
              await MyBot.sendMessage(
                myChatId,
                `${mes2.join('\n')}${sumMessage}`,
                MESSAGE_OPTIONS
              );
            }, 500);

            return;
          }
          await MyBot.sendMessage(
            myChatId,
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${firstName}, —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–ª –±–∞–ª–∞–Ω—Å.\n ${arrOfMessages.join('\n')}${sumMessage}`,
            MESSAGE_OPTIONS
          );
          return MyBot.sendMessage(id, `${arrOfMessages.join('\n')}${sumMessage}`, MESSAGE_OPTIONS);
        }

        if (text === '‚è∞‚è∞‚è∞') {
          if (timeoutId) {
            clearTimeout(timeoutId);
            timeoutId = null;

            return MyBot.sendMessage(id, '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ!', MESSAGE_OPTIONS);
          }

          return MyBot.sendMessage(
            id,
            '–í–≤–µ–¥–∏—Ç–µ % –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ —Ä–∞–º–∫–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:',
            AGAIN_MESSAGE_OPTIONS
          );
        }

        if (text === '‚è∞‚è∞') {
          if (remainderTask) {
            remainderTask.stop();
            remainderTask = null;
            MyBot.sendMessage(id, '–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –æ—Ç–∫–ª—é—á–µ–Ω—ã!', MESSAGE_OPTIONS);
          } else {
            remainderTask = cron.schedule(
              '0 19 * * *',
              async () => {
                const orders = await orderService.getRawUserOrders(userExist.id);
                const coinNameList = getUniqNameOrders(orders);
                const gridRowData = getGridRowData(
                  orders,
                  userExist.list,
                  userExist.prevData.gridRowData
                );
                const comparisonOrdersAndPriceList = getComparisonOrdersAndPriceList(
                  orders,
                  userExist.list
                );
                const netProfitRaw = getNetProfit(comparisonOrdersAndPriceList);
                const totalInvested = getTotalInvested(orders);
                const netProfitPercent = getNetProfitPercent(netProfitRaw, totalInvested);
                const oldWalletState = getWalletState(netProfitRaw, totalInvested);
                const prevData = {
                  netProfit: netProfitPercent,
                  walletState: oldWalletState,
                  gridRowData
                };
                const refreshData = await refreshService.refresh({
                  userId: userExist.id,
                  prevData,
                  coinList: coinNameList
                });
                const { diffWalletState, walletState, diffNetProfit } = compareResults(refreshData);
                await MyBot.sendMessage(
                  id,
                  `–ë—ã–ª–æ: ${round(oldWalletState, 2)}$\nC—Ç–∞–ª–æ: ${round(
                    walletState,
                    2
                  )}$\n–†–∞–∑–Ω–∏—Ü–∞: ${round(diffWalletState, 2)}$(${round(diffNetProfit, 2)}%)`,
                  MESSAGE_OPTIONS
                );
              },
              { timezone: 'Europe/Minsk' }
            );

            await MyBot.sendMessage(id, '–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –≤–∫–ª—é—á–µ–Ω—ã!', MESSAGE_OPTIONS);
          }

          return;
        }

        if (isFinite(textLikeNumber) && textLikeNumber > 0) {
          if (timeoutId) clearTimeout(timeoutId);

          timeoutId = setInterval(
            runNotification,
            TEN_MINUTE,
            userExist.id,
            textLikeNumber,
            id,
            userExist.list
          );

          return MyBot.sendMessage(
            id,
            `–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–æ –Ω–∞ –∫–∞–∂–¥—ã–µ ${TEN_MINUTE / MINUTE} –º–∏–Ω—É—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ ${text}%!`,
            MESSAGE_OPTIONS
          );
        }

        return MyBot.sendMessage(id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)', MESSAGE_OPTIONS);
      } catch (error) {
        return MyBot.sendMessage(id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–æ—á–∫–∞!)', MESSAGE_OPTIONS);
      }
    }
  );
};

export default runTelegramBotService;
